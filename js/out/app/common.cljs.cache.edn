{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name app.common, :imports nil, :requires {rum rum.core, rum.core rum.core}, :uses nil, :defs {state {:name app.common/state, :file "C:\\Users\\Julec\\Desktop\\a\\myAppTest\\src\\app\\common.cljs", :line 5, :column 1, :end-line 5, :end-column 11, :meta {:file "C:\\Users\\Julec\\Desktop\\a\\myAppTest\\src\\app\\common.cljs", :line 5, :column 6, :end-line 5, :end-column 11}, :tag any}, write-error-to-state {:protocol-inline nil, :meta {:file "C:\\Users\\Julec\\Desktop\\a\\myAppTest\\src\\app\\common.cljs", :line 9, :column 7, :end-line 9, :end-column 27, :arglists (quote ([msg remove-file]))}, :name app.common/write-error-to-state, :variadic false, :file "C:\\Users\\Julec\\Desktop\\a\\myAppTest\\src\\app\\common.cljs", :end-column 27, :method-params ([msg remove-file]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([msg remove-file]))}}, :require-macros {rum rum.core, rum.core rum.core}, :cljs.analyzer/constants {:seen #{:file-content :file-name :file-error}, :order [:file-name :file-error :file-content]}, :doc nil}